import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import styles from '../styles/GenQuiz.module.css';
import editStyles from '../styles/GenQuizEdit.module.css';

// Types
interface GeneratedQuestion {
  questionText: string;
  questionType: string;
  explanation?: string;
  points: number;
  timeLimit?: number;
  answers: {
    answerText: string;
    isCorrect: boolean;
    orderIndex: number;
  }[];
}
 
interface GeneratedQuiz {
  title: string;
  questions: GeneratedQuestion[];
}

interface EditingState {
  questionIndex: number;
  isEditing: boolean;
}

const GenQuiz: React.FC = () => {
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [loading, setLoading] = useState(false);
  const [generatedQuiz, setGeneratedQuiz] = useState<GeneratedQuiz | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [editingState, setEditingState] = useState<EditingState>({ questionIndex: -1, isEditing: false });

  // X·ª≠ l√Ω ch·ªânh s·ª≠a c√¢u h·ªèi
  const handleEditQuestion = (questionIndex: number, newText: string) => {
    if (!generatedQuiz) return;
    
    const updatedQuiz = { ...generatedQuiz };
    updatedQuiz.questions[questionIndex].questionText = newText;
    setGeneratedQuiz(updatedQuiz);
  };

  // X·ª≠ l√Ω ch·ªânh s·ª≠a ƒë√°p √°n
  const handleEditAnswer = (questionIndex: number, answerIndex: number, newText: string) => {
    if (!generatedQuiz) return;
    
    const updatedQuiz = { ...generatedQuiz };
    updatedQuiz.questions[questionIndex].answers[answerIndex].answerText = newText;
    setGeneratedQuiz(updatedQuiz);
  };

  // X·ª≠ l√Ω thay ƒë·ªïi ƒë√°p √°n ƒë√∫ng cho MULTIPLE_CHOICE, SHORT_ANSWER, TRUE_FALSE
  const handleChangeCorrectAnswer = (questionIndex: number, answerIndex: number) => {
    if (!generatedQuiz) return;
    
    const updatedQuiz = { ...generatedQuiz };
    const question = updatedQuiz.questions[questionIndex];
    
    if (question.questionType === 'MULTIPLE_SELECT') {
      // V·ªõi MULTIPLE_SELECT, c√≥ th·ªÉ c√≥ nhi·ªÅu ƒë√°p √°n ƒë√∫ng
      updatedQuiz.questions[questionIndex].answers[answerIndex].isCorrect = 
        !updatedQuiz.questions[questionIndex].answers[answerIndex].isCorrect;
    } else {
      // V·ªõi c√°c lo·∫°i kh√°c, ch·ªâ c√≥ m·ªôt ƒë√°p √°n ƒë√∫ng
      updatedQuiz.questions[questionIndex].answers = updatedQuiz.questions[questionIndex].answers.map((ans, idx) => ({
        ...ans,
        isCorrect: idx === answerIndex
      }));
    }
    setGeneratedQuiz(updatedQuiz);
  };

  // H√†m l·∫•y t√™n lo·∫°i c√¢u h·ªèi
  const getQuestionTypeName = (type: string) => {
    switch (type) {
      case 'MULTIPLE_CHOICE':
        return 'Tr·∫Øc nghi·ªám (1 ƒë√°p √°n)';
      case 'MULTIPLE_SELECT':
        return 'Tr·∫Øc nghi·ªám (nhi·ªÅu ƒë√°p √°n)';
      case 'SHORT_ANSWER':
        return 'C√¢u tr·∫£ l·ªùi ng·∫Øn';
      case 'TRUE_FALSE':
        return 'ƒê√∫ng/Sai';
      default:
        return type;
    }
  };

  // H√†m l·∫•y icon cho lo·∫°i c√¢u h·ªèi
  const getQuestionTypeIcon = (type: string) => {
    switch (type) {
      case 'MULTIPLE_CHOICE':
        return 'üîò';
      case 'MULTIPLE_SELECT':
        return '‚òëÔ∏è';
      case 'SHORT_ANSWER':
        return '‚úèÔ∏è';
      case 'TRUE_FALSE':
        return '‚ùì';
      default:
        return 'üìù';
    }
  };

  const handleGenerateQuiz = async () => {
    if (!title.trim()) {
      setError('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ cho b√†i quiz');
      return;
    }

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const token = localStorage.getItem('token');
    if (!token) {
      setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o quiz!');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await axios.post('http://localhost:8080/api/quizzes/generate-ai', 
        {
          title: title.trim()
        },
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      if (response.data.success) {
        setGeneratedQuiz(response.data.data);
        setError(null);
      } else {
        setError(response.data.error || 'C√≥ l·ªói x·∫£y ra khi t·∫°o quiz');
      }
    } catch (err: any) {
      if (err.response?.status === 403) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n');
      } else {
        setError(err.response?.data?.error || 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi server');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleSaveQuiz = async () => {
    if (!generatedQuiz) return;

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const token = localStorage.getItem('token');
    if (!token) {
      setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u quiz!');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Preserve all question attributes when saving
      const quizToSave = {
        title: generatedQuiz.title,
        questions: generatedQuiz.questions.map(q => ({
          ...q,
          questionType: q.questionType, // Ensure each question's type is preserved
          timeLimit: q.timeLimit || 30, // Set default time limit if not specified
          points: q.points || 1, // Ensure points are set
          answers: q.answers.map((a, index) => ({
            ...a,
            orderIndex: index // Ensure order index is set correctly
          }))
        }))
      };

      const response = await axios.post(
        'http://localhost:8080/api/quizzes/save-generated', 
        quizToSave,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );

      if (response.data.success) {
        setShowSuccess(true);
        setTimeout(() => {
          navigate(`/quizzes/${response.data.data.id}`);
        }, 2000);
      } else {
        setError(response.data.error || 'C√≥ l·ªói x·∫£y ra khi l∆∞u quiz');
      }
    } catch (err: any) {
      if (err.response?.status === 403) {
        setError('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n');
      } else {
        setError(err.response?.data?.error || 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi server');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setGeneratedQuiz(null);
    setTitle('');
    setError(null);
  };

  if (showSuccess) {
    return (
      <div className={styles.container}>
        <div className={`${styles.previewSection} ${styles.success}`}>
          <div className={styles.successIcon}>‚úì</div>
          <h2 className={styles.title}>ƒê√£ l∆∞u Quiz th√†nh c√¥ng!</h2>
          <p>ƒêang chuy·ªÉn ƒë·∫øn trang chi ti·∫øt...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <h1 className={styles.title}>T·∫°o Quiz v·ªõi AI</h1>
        <p className={styles.subtitle}>
          Nh·∫≠p ti√™u ƒë·ªÅ v·ªÅ ch·ªß ƒë·ªÅ b·∫°n mu·ªën t·∫°o quiz v√† ƒë·ªÉ AI gi√∫p b·∫°n t·∫°o c√°c c√¢u h·ªèi
        </p>
      </header>

      {error && <div className={styles.error}>{error}</div>}

      <div className={styles.form}>
        <input
          type="text"
          className={styles.input}
          placeholder="V√≠ d·ª•: L·ªãch s·ª≠ Vi·ªát Nam th·∫ø k·ª∑ 20"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          disabled={loading}
        />
        <button
          className={styles.button}
          onClick={handleGenerateQuiz}
          disabled={loading || !title.trim()}
        >
          {loading ? (
            <span className={styles.loadingDots}>ƒêang t·∫°o</span>
          ) : (
            'T·∫°o Quiz'
          )}
        </button>
      </div>

      {generatedQuiz && (
        <div className={styles.previewSection}>
          <div className={styles.quizHeader}>
            <h2 className={styles.previewTitle}>
              Xem tr∆∞·ªõc Quiz: {generatedQuiz.title}
            </h2>
            <div className={styles.quizStats}>
              <span className={styles.statItem}>
                üìä {generatedQuiz.questions.length} c√¢u h·ªèi
              </span>
              <span className={styles.statItem}>
                ‚≠ê {generatedQuiz.questions.reduce((sum, q) => sum + q.points, 0)} ƒëi·ªÉm
              </span>
            </div>
          </div>
          
          <div>
            {generatedQuiz.questions.map((question, index) => (
              <div key={index} className={styles.questionCard}>
                {editingState.isEditing && editingState.questionIndex === index ? (
                  // Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
                  <>
                    <div className={styles.questionEdit}>
                      <div className={styles.questionMeta}>
                        <span className={styles.questionType}>
                          {getQuestionTypeIcon(question.questionType)} {getQuestionTypeName(question.questionType)}
                        </span>
                        <div className={styles.questionInfo}>
                          <span className={styles.points}>‚≠ê {question.points} ƒëi·ªÉm</span>
                          {question.timeLimit && (
                            <span className={styles.timeLimit}>‚è±Ô∏è {question.timeLimit}s</span>
                          )}
                        </div>
                      </div>
                      <textarea
                        value={question.questionText}
                        onChange={(e) => handleEditQuestion(index, e.target.value)}
                        className={styles.textareaInput}
                        placeholder="Nh·∫≠p c√¢u h·ªèi..."
                        rows={3}
                      />
                      {question.explanation && (
                        <div className={styles.explanation}>
                          <strong>Gi·∫£i th√≠ch:</strong> {question.explanation}
                        </div>
                      )}
                    </div>
                    <div className={styles.answerList}>
                      {question.answers.map((answer, ansIndex) => (
                        <div key={ansIndex} className={styles.answerEdit}>
                          <input
                            type="text"
                            value={answer.answerText}
                            onChange={(e) => handleEditAnswer(index, ansIndex, e.target.value)}
                            className={styles.input}
                            placeholder={`ƒê√°p √°n ${String.fromCharCode(65 + ansIndex)}...`}
                          />
                          <label className={styles.correctAnswerLabel}>
                            <input
                              type={question.questionType === 'MULTIPLE_SELECT' ? 'checkbox' : 'radio'}
                              checked={answer.isCorrect}
                              onChange={() => handleChangeCorrectAnswer(index, ansIndex)}
                              className={styles.radioInput}
                              name={`question-${index}`}
                            />
                            <span className={styles.radioLabel}>ƒê√°p √°n ƒë√∫ng</span>
                          </label>
                        </div>
                      ))}
                    </div>
                    <div className={styles.editActions}>
                      <button 
                        className={`${styles.button} ${styles.secondary}`}
                        onClick={() => setEditingState({ questionIndex: -1, isEditing: false })}
                      >
                        ‚úì Xong
                      </button>
                    </div>
                  </>
                ) : (
                  // Ch·∫ø ƒë·ªô xem
                  <>
                    <div className={styles.questionHeader}>
                      <div className={styles.questionMeta}>
                        <span className={styles.questionNumber}>C√¢u {index + 1}</span>
                        <span className={styles.questionType}>
                          {getQuestionTypeIcon(question.questionType)} {getQuestionTypeName(question.questionType)}
                        </span>
                        <div className={styles.questionInfo}>
                          <span className={styles.points}>‚≠ê {question.points} ƒëi·ªÉm</span>
                          {question.timeLimit && (
                            <span className={styles.timeLimit}>‚è±Ô∏è {question.timeLimit}s</span>
                          )}
                        </div>
                      </div>
                      <button
                        className={`${styles.button} ${styles.small} ${styles.editButton}`}
                        onClick={() => setEditingState({ questionIndex: index, isEditing: true })}
                      >
                        ‚úèÔ∏è S·ª≠a
                      </button>
                    </div>
                    
                    <div className={styles.questionContent}>
                      <div className={styles.questionText}>
                        {question.questionText}
                      </div>
                      
                      {question.explanation && (
                        <div className={styles.explanation}>
                          <strong>üí° Gi·∫£i th√≠ch:</strong> {question.explanation}
                        </div>
                      )}
                      
                      <div className={styles.answerList}>
                        {question.answers.map((answer, ansIndex) => (
                          <div
                            key={ansIndex}
                            className={`${styles.answerItem} ${
                              answer.isCorrect ? styles.correct : ''
                            } ${styles[question.questionType.toLowerCase()]}`}
                          >
                            <span className={styles.answerPrefix}>
                              {question.questionType === 'TRUE_FALSE' 
                                ? (ansIndex === 0 ? '‚úì' : '‚úó')
                                : String.fromCharCode(65 + ansIndex)
                              }.
                            </span>
                            <span className={styles.answerText}>{answer.answerText}</span>
                            {answer.isCorrect && (
                              <span className={styles.correctMark}>
                                {question.questionType === 'MULTIPLE_SELECT' ? '‚òëÔ∏è' : '‚úÖ'}
                              </span>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </>
                )}
              </div>
            ))}
            
            <div className={styles.buttonGroup}>
              <button
                className={`${styles.button} ${styles.secondary}`}
                onClick={handleReset}
                disabled={loading}
              >
                üîÑ T·∫°o l·∫°i
              </button>
              <button
                className={`${styles.button} ${styles.primary}`}
                onClick={handleSaveQuiz}
                disabled={loading}
              >
                {loading ? (
                  <span className={styles.loadingDots}>ƒêang l∆∞u</span>
                ) : (
                  'üíæ L∆∞u Quiz'
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GenQuiz;